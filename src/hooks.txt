import {useState} from "react";

export default function useInput(initialValue) {             //!!! useInput
    const [value, setValue] = useState(initialValue);

    const onChange = e => {
        setValue(e.target.value)
    }

    return {
        value, onChange
    }
};



//////////////////////////////////////////// //!!! useInput TS

// import {useState, ChangeEvent} from "react";

// export default function useInput(initialValue: any) {
//     const [value, setValue] = useState(initialValue);

//     const onChange = (e: ChangeEvent<HTMLInputElement>) => {
//         setValue(e.target.value)
//     }

//     const reset = () => {
//         setValue(initialValue)
//     }

//     return {
//         value, onChange, reset
//     }
// };

----------------
import useInput from "./hooks/useInput";

function App() {
    
    const username = useInput('');

return (
        <div>
            <input {...username} type="text" placeholder='Username' />
        </div>
    );
}

export default App;


//////////////////////////////////////////////////////////////////////////  useHover

import {useEffect, useState} from "react";

export default function useHover(ref) {
    const [isHovering, setHovering] = useState(false);

    const on = () => setHovering(true);
    const off = () => setHovering(false);

    useEffect(() => {
        if (!ref.current) {
            return;
        }
        const node = ref.current;

        node.addEventListener('mouseenter', on)
        node.addEventListener('mousemove', on)
        node.addEventListener('mouseleave', off)

        return function () {
            node.removeEventListener('mouseenter', on)
            node.removeEventListener('mousemove', on)
            node.removeEventListener('mouseleave', off)
        };
    }, [])

    return isHovering;          //Mожно менять стили
};

----------------------------------
import useHover from "../hooks/useHover";

const Hover = () => {
    const ref = useRef();
    const isHovering = useHover(ref);

    console.log(isHovering)

    return (
        <div ref={ref} style={{width: 300, height: 300, background: isHovering ? 'red' : 'green'}}>
        </div>
    );
};

export default Hover;

////////////////////////////////////////////////////////////// useScroll

import {useEffect, useRef} from "react";

export default function useScroll(parentRef, childRef, callback) {
    const observer = useRef();

    useEffect(() => {
        const options = {
            root: parentRef.current,
            rootMargin: '0px',
            threshold: 0
        }
        observer.current = new IntersectionObserver(([target]) => {
            if (target.isIntersecting) {
                console.log('intersected')
                callback()
            }
        }, options)

        observer.current.observe(childRef.current) //подписка слежки за контрольной областью для пересечения

        return function () {
            observer.current.unobserve(childRef.current) //отписка слежки за областью для пересечения
        };
    }, [callback])
};
//если происходит пересечение заданной области-выполняется

-----------------------------------------

import React, {useEffect, useRef, useState} from 'react';
import useScroll from "../hooks/useScroll";  //сработает сразу при достижении области childRef

const List = () => {
    const [todos, setTodos] = useState([])
    const [page, setPage] = useState(1);
    const limit = 20;
    const parentRef = useRef();
    const childRef = useRef();
    const intersected = useScroll(parentRef, childRef, () => fetchTodos(page, limit));
    //сработает fetchTodos(page, limit) при достижении области childRef

    function fetchTodos(page, limit) {
        fetch(`https://jsonplaceholder.typicode.com/todos?_limit=${limit}&_page=${page}`)
            .then(response => response.json())
            .then(json => {
                setTodos(prev => [...prev, ...json]);
                setPage(prev => prev + 1)
            })
    }



    return (
        <div ref={parentRef} style={{height: '80vh', overflow: 'auto'}}>
            {todos.map(todo =>
                <div key={todo.id} style={{padding: 30, border: '2px solid black'}}>
                    {todo.id}. {todo.title}
                </div>
            )}
            <div ref={childRef} style={{height: 20, background: 'green'}}/>
        </div>
    );
};

export default List;

///////////////////////////////////////////////////////////// useDebounce

import {useCallback, useRef} from "react";

export default function useDebounce(callback, delay) {
    const timer = useRef();

    const debouncedCallback = useCallback((...args) => {
        if (timer.current) {       //ф-ция перезаписывается каждый раз пока идёт ввод, 
            clearTimeout(timer.current) //очистка
        }
        timer.current = setTimeout(() => { //а когда нет ввода через время callback выполнится
            callback(...args)
        }, delay)
    }, [callback, delay])

    return debouncedCallback;
};

------------------------
import React, {useState} from 'react';
import useDebounce from "./hooks/useDebounce";

function Search() {
    const [value, setValue] = useState('');
    const debouncedSearch = useDebounce(search, 500);

    function search(query) {  //эта ф-ция попала в аргумент debouncedSearch
        fetch(`https://jsonplaceholder.typicode.com/todos?query=`+query)
        .then(res => res.json())
        .then(json => {console.log(json)});
    }

    const onChange = e => {
        setValue(e.target.value);
        //search(e.target.value)
        debouncedSearch(e.target.value) //отсрочка ф-ции search
    }
   
    return (
        <div>
            <input 
                type="text"
                placeholder='Type for search'
                value={value}
                onChange={onChange}
                />
        </div>
    );
}

export default Search;

//////////////////////////////////////////////////////////////. useRequest
import {useEffect, useState} from "react";

export default function (request) { //в качестве пар-ра ф-ция-запрос
    const [data, setData] = useState(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');

    useEffect(() => {
        setLoading(true)
        setTimeout(() => { //setTimeout просто для наглядности запроса
            request()
                .then(response => setData(response.data))
                .catch(error => setError(error))
                .finally(() => setLoading(false))
        }, 1000)
    }, [])

    return [data, loading, error]
};

---------------------------------------------
import useRequest from "./hooks/useRequest";

function App() {
    const [todos, loading, error] = useRequest(fetchTodos);


    function fetchTodos() {
        return axios.get(`https://jsonplaceholder.typicode.com/todos`)
    }

    if (loading) {
        return <h1>Идет загрузка...</h1>
    }

    if (error) {
        return <h1>Произошла ошибка при загрузке данных</h1>
    }

    return (
        <div>
            {todos && todos.map(todo =>
                <div key={todo.id} style={{padding: 30, border: '2px solid black'}}>
                    {todo.id}. {todo.title}
                </div>
            )}
        </div>
    );
}

export default App;

///////////////////////////////////////////////////////////////////. useContext

import {createContext, Dispatch, FC, SetStateAction, useState, useMemo, useContext
} from "react";

// interface IContext {
//     isAuth: Boolean
//     setIsAuth: Dispatch<SetStateAction<boolean>>
// }

//export const AuthContext = createContext<IContext> ({} as IContext);

// export const AuthProvider:FC = ({children}) => {
//     const [isAuth, setIsAuth] = useState(false);

//     const value = useMemo(() => ({
//         isAuth,
//         setIsAuth
//         }), [isAuth])

//     return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
// };

export const useAuth = () => useContext(AuthContext); //хук для получения контекста

//-----------------------
//обернули приложение
//<AuthProvider>
//<App/>
//</AuthProvider>

//---------------------

//import {AuthContext, useAuth} from './AuthContext'

//const App: FC = () => {
    //const {isAuth} = useContext(AuthContext); //получили переменную isAuth
//     const {isAuth} = useAuth() //аналогично получили переменную isAuth
//     return (
//         <>{isAuth}</>
//     )
// }


///////////////////////////////////////////////////////////////// useTypedSelector

import {TypedUseSelectorHook, useSelector} from "react-redux";
//export const useTypedSelector:TypedUseSelectorHook<RootState> =useSelector;
// ПОЛУЧИЛИ ТИПИЗИРОВАННЫЙ ХУК
//-----------------------
//import { useTypedSelector} from './useTypedSelector'

//const App: FC = () => {
//const appContent = useTypedSelector(state => state.people); //получили часть state
// вместо const appContent = useTypedSelector(state: RootState....
//     return (
//         <>{appContent}</>
//     )
// }


///////////////////////////////////////////////////////////////// useActions 
import { useDispatch } from "react-redux";
import { bindActionCreators } from "redux";
import * as AllActions from "../store/actions";

//const useActions = () => {
//   const dispatch = useDispatch();
// return bindActionCreators(AllActions, dispatch)
//}

//export default useActions;
//-----------------------
//import { useActions} from './useActions'

//const App: FC = () => {
//const { changeName } = useActions(); //получили экшн changeName
// 
//     return (
//         <>{...}</>
//     )
// }
//////////////////////////////////////////////////////////////  useLocalStorage

import { useEffect, useState } from "react";

// export const useLocalStorage = (key: string, initialValue: any) => {
//   const [value setValue] = useState(()=> {
//       const json = localStorage.getItem(key);
//       if(json!==null) return JSON.parse(json);
//       return initialValue;
//   });
//   useEffect(() => {
//       localStorage.setItem(key, JSON.stringify(value))
//   }, [key, value]);

//   return [value, setValue]
// }

//-----------------------
//import { useLocalStorage} from './useLocalStorage'
//import {initialState} from './reducer'

//const App: FC = () => {
//const { todos, setTodos } = useLocalStorage('todos', initialState); //применение useLocalStorage
// 
//     return (
//         <>{todos}</>
//     )
// }


///////////////////////////////////////////////////////////useCookie

import Cookies from "js-cookie";  //cкачали либу
import { useEffect, useState, useCallback } from "react";

// export const useCookie = (name, initialValue) => {
//   const [value setValue] = useState(()=> {
//       const cookie = Cookies.get(name);
//       if(cookie) return cookie;
//       Cookies.set(name, initialValue);
//       return initialValue;
//   });

//   const updateCookie =  useCallback((newVal, options) => {
//      Cookies.set(name, newVal, options);
//      setValue(newVal)
//   }, [name]);

//   const deleteCookie = useCallback(() => {
//      Cookies.remove(name);
//      setValue(null);
//}, [name]);

//   return [value, updateCookie, deleteCookie]
// }

//-----------------------

//import { useCookie} from './useCookie'


//const App: FC = () => {
//const [value, updateCookie, deleteCookie] = useCookiege('token', ''); //применение 
// 
//    const changeToken = () => {
//      updateCookie(String(newDate()))
//}
//     return (
//         <>
            // <div>Token: {value}</div>
            // <button onClick={changeToken}>
            //     Change Token
            // </button>
            // <button onClick={deleteCookie}>
            // Delete Token
            // </button>
       //     </>
//     )
// }
//////////////////////////////////


//////////////////////////////////////////////////////////useOutside

import {Dispatch, FC, SetStateAction, useState, useEffect, useRef} from "react";

// type TypeOut = {
//     ref: any
//     isShow: boolean
//     setIsShow: Dispatch<SetStateAction<boolean>>
// }

// export const useOutside = (initialVisible: boolean): TypeOut => {
//   const [isShow, setIsShow] = useState((initialVisible);
//   const ref = useRef<HTMLElement>(null);

//   const handleClickOutside = (event: any) => {
//       if(ref.current && !ref.current.contains(event.target)){
//           setIsShow(false)
//       }
//   }

//   useEffect(() => {
//       document.addEventListener('click', handleClickOutside, true);
//       return () => {
//         document.removeEventListener('click', handleClickOutside, true);
//       }
//   });

//  return [ref, isShow, setIsShow]
//}

//-----------------------
//import { useOutside} from './useOutside'


//const App: FC = () => {
  const ref = useRef();
//const { ref, isShow, setIsShow } = useOutside(false); //применение 
// 
//     return (
// //         <>
//             <div ref={ref}>Hide</div>
//            </>
// //     )
// }
//////////////////////////////////
